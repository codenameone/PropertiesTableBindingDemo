package com.codename1.properties.table.binding.demo;

import static com.codename1.ui.CN.*;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.ui.Toolbar;
import java.io.IOException;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.io.NetworkEvent;
import com.codename1.properties.PropertyIndex;
import com.codename1.properties.UiBinding;
import com.codename1.ui.FontImage;
import com.codename1.ui.table.Table;
import java.util.List;
import java.util.ArrayList;
import java.util.Date;

/**
 * This file was generated by
 * <a href="https://www.codenameone.com/">Codename One</a> for the purpose
 * of building native mobile applications using Java.
 */
public class PropertiesTableDemo {

    private List<Contact> listOfContacts;
    private Form current;
    private Resources theme;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if(err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error",
                "There was a networking error in the connection to " + err.
                getConnectionRequest().getUrl(), "OK", null);
        });
    }

    public void start() {
        if(current != null) {
            current.show();
            return;
        }
        if(!existsInStorage("contacts.json")) {
            listOfContacts = new ArrayList<>();
            Contact c =new Contact().
                id.set(1).
                dateOfBirth.set(new Date()).
                name.set("Shai").
                gender.set("Male");
            listOfContacts.add(c);
            listOfContacts.add(new Contact().
                id.set(2).
                dateOfBirth.set(new Date()).
                name.set("Steve").
                gender.set("Male"));
            listOfContacts.add(new Contact().
                id.set(3).
                dateOfBirth.set(new Date()).
                name.set("Chen").
                gender.set("Male"));
            PropertyIndex.storeJSONList("contacts.json", listOfContacts);
        } else {
            listOfContacts = new Contact().getPropertyIndex().loadJSONList(
                "contacts.json");
        }

        Form hi = new Form("Property Table", BoxLayout.y());
        UiBinding ui = new UiBinding();
        Contact prot = new Contact();
        UiBinding.BoundTableModel tb = ui.createTableModel(listOfContacts, prot);
        tb.setMultipleChoiceOptions(prot.gender, "Male", "Female", "Unspecified");
        Table t = new Table(tb);
        hi.add(t);
        hi.getToolbar().addMaterialCommandToRightBar("",
            FontImage.MATERIAL_ADD, e -> {
                tb.addRow(tb.getRowCount(), new Contact().name.
                    set("Unnamed"));
            });
        hi.getToolbar().addMaterialCommandToRightBar("",
            FontImage.MATERIAL_REMOVE, e -> {
                if(t.getSelectedRow() > -1) {
                    tb.removeRow(t.getSelectedRow());
                }
            });
        hi.getToolbar().addMaterialCommandToRightBar("",
            FontImage.MATERIAL_SAVE, e -> PropertyIndex.
                storeJSONList("contacts.json", listOfContacts));
        hi.show();
    }

    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog) current).dispose();
            current = getCurrentForm();
        }
    }

    public void destroy() {
    }

}
